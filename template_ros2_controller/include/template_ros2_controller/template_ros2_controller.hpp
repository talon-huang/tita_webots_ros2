// Copyright (c) 2023 Direct Drive Technology Co., Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef TEMPLATE_ROS2_CONTROLLER__TEMPLATE_ROS2_CONTROLLER_HPP_
#define TEMPLATE_ROS2_CONTROLLER__TEMPLATE_ROS2_CONTROLLER_HPP_

#include <chrono>
#include <memory>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/point_stamped.hpp"
#include "geometry_msgs/msg/pose_with_covariance_stamped.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_with_covariance_stamped.hpp"
#include "geometry_msgs/msg/vector3.hpp"
#include "hardware_interface/types/hardware_interface_type_values.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "semantic_components/imu_sensor.hpp"
#include "sensor_msgs/msg/imu.hpp"
#include "sensor_msgs/msg/joint_state.hpp"
#include "sensor_msgs/msg/joy.hpp"
#include "std_msgs/msg/string.hpp"
#include "tf2/LinearMath/Quaternion.h"
#include "tf2_geometry_msgs/tf2_geometry_msgs.hpp"
#include "tf2_ros/transform_broadcaster.h"
// auto-generated by generate_parameter_library
#include "template_ros2_controller_parameters.hpp"

namespace tita_locomotion
{
using LoanedCommandInterface =
  std::optional<std::reference_wrapper<hardware_interface::LoanedCommandInterface>>;
using LoanedStateInterface =
  std::optional<std::reference_wrapper<hardware_interface::LoanedStateInterface>>;
struct Joint
{
  Joint() {}
  LoanedCommandInterface position_command_handle;
  LoanedCommandInterface velocity_command_handle;
  LoanedCommandInterface effort_command_handle;

  LoanedStateInterface position_handle;
  LoanedStateInterface velocity_handle;
  LoanedStateInterface effort_handle;
  std::string name;
};

class TemplateRos2Controller : public controller_interface::ControllerInterface
{
public:
  ~TemplateRos2Controller();
  TemplateRos2Controller();
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;
  controller_interface::CallbackReturn on_init() override;
  controller_interface::return_type update(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;
  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;
  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;
  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;
  controller_interface::CallbackReturn on_cleanup(
    const rclcpp_lifecycle::State & previous_state) override;
  controller_interface::CallbackReturn on_error(
    const rclcpp_lifecycle::State & previous_state) override;
  controller_interface::CallbackReturn on_shutdown(
    const rclcpp_lifecycle::State & previous_state) override;

protected:
  std::vector<std::shared_ptr<Joint>> joints_;
  std::vector<std::string> joint_names_;
  std::vector<std::string> sensor_names_;
  std::vector<std::string> command_interface_types_;
  std::vector<std::string> state_interface_types_;
  std::unique_ptr<semantic_components::IMUSensor> imu_sensor_;

  std::shared_ptr<template_ros2_controller::ParamListener> param_listener_;
  template_ros2_controller::Params params_;

};

}  // namespace tita_locomotion
#endif  // TEMPLATE_ROS2_CONTROLLER__TEMPLATE_ROS2_CONTROLLER_HPP_
